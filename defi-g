// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract DeFiToken is ERC20 {
    address public owner;
    uint256 public constant INITIAL_SUPPLY = 7_000_000 * 10**18; // Total supply: 7 million tokens
    uint256 public constant FOUNDER_SUPPLY = 100_000 * 10**18; // Founder supply: 100,000 tokens

    constructor() ERC20("DeFi Token", "DEFI") {
        owner = msg.sender;
        _mint(owner, FOUNDER_SUPPLY); // Mint initial tokens to owner
        _mint(address(this), INITIAL_SUPPLY - FOUNDER_SUPPLY); // Mint remaining tokens to contract
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(amount <= balanceOf(msg.sender), "ERC20: transfer amount exceeds balance");

        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(amount <= allowance(sender, _msgSender()), "ERC20: transfer amount exceeds allowance");
        require(amount <= balanceOf(sender), "ERC20: transfer amount exceeds balance");

        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), allowance(sender, _msgSender()) - amount);
        return true;
    }
}
